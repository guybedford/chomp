version = 0.1
[[template]]
name = "babel"
definition = """({ name, targets, deps, env, templateOpts: { presets = [], plugins = [], sourceMap = true, babelRc = true, configFile = null } }) => [{
  name,
  targets,
  deps: [...deps, ...presets.map(p => `node_modules/${p}`), ...plugins.map(p => `node_modules/${p}`), 'node_modules/@babel/core', 'node_modules/@babel/cli'],
  env,
  run: `babel $DEP -o $TARGET${
      sourceMap ? ' --source-maps' : ''
    }${
      plugins.length ? ` --plugins=${plugins.join(',')}` : ''
    }${
      presets.length ? ` --presets=${presets.join(',')}` : ''
    }${
      !babelRc ? ' --no-babelrc' : ''
    }${
      configFile ? ` --config-file=${configFile.startsWith('./') ? configFile : './' + configFile}` : ''
    }`
}, {
  template: 'npm',
  templateOpts: {
    packages: [...presets.map(p => p.startsWith('@babel/') ? p + '@7' : p), ...plugins.map(p => p.startsWith('@babel/') ? p + '@7' : p), '@babel/core@7', '@babel/cli@7'],
    dev: true
  }
}];
"""
[[template]]
name = "jspm"
definition = """({ name, targets, deps, env, templateOpts: {
  env: generatorEnv = ['browser', 'production', 'module'],
  preload,
  integrity,
  whitespace,
  esModuleShims,
  ...generateOpts
} }) => [{
  name,
  targets,
  deps: [...deps, 'node_modules/@jspm/generator', 'node_modules/mkdirp'],
  env,
  engine: 'node',
  run: `
    import { Generator } from '@jspm/generator';
    import { readFile, writeFile } from 'fs/promises';
    import { pathToFileURL } from 'url';
    import mkdirp from 'mkdirp';
    import { dirname, relative, resolve } from 'path';

    const opts = ${JSON.stringify(generateOpts)};
    const htmlUrl = pathToFileURL(process.env.TARGET);

    if (opts.resolutions) {
      const newResolutions = {};
      // renormalize relative resolutions relative to cwd
      const cwd = process.cwd();
      for (const key of Object.keys(opts.resolutions)) {
        const target = opts.resolutions[key];
        if (!target.startsWith('./') && !target.startsWith('../')) {
          newResolutions[key] = target;
          continue;
        }
        const normalizedTarget = relative(dirname(resolve(cwd, process.env.TARGET)), resolve(cwd, target)).replace(/\\\\\\\\/g, '/');
        newResolutions[key] = normalizedTarget;
      }
      console.log(newResolutions);
      opts.resolutions = newResolutions;
    }

    const generator = new Generator({
      mapUrl: htmlUrl,
      env: ${JSON.stringify(generatorEnv)},
      ...opts
    });

    const htmlSource = await readFile(process.env.DEP, 'utf-8');
    const htmlOpts = ${JSON.stringify({ preload, integrity, whitespace, esModuleShims })};
    htmlOpts.htmlUrl = htmlUrl;
    const outHtml = await generator.htmlGenerate(htmlSource, htmlOpts);

    mkdirp.sync(dirname(process.env.TARGET));
    await writeFile(process.env.TARGET, outHtml);
  `
}, {
  template: 'npm',
  templateOpts: {
    packages: ['@jspm/generator', 'mkdirp'],
    dev: true
  }
}]
"""
[[template]]
name = "npm"
definition = """({ name, deps, env, templateOpts: { packages, dev, pkgManager = 'npm', autoInstall } }) => autoInstall ? [{
  name,
  deps: [...deps, ...packages.map(pkg => {
    const versionIndex = pkg.indexOf('@', 1);
    return `node_modules/${versionIndex === -1 ? pkg : pkg.slice(0, versionIndex)}`;
  })],
  serial: true
}, ...packages.map(pkg => {
  const versionIndex = pkg.indexOf('@', 1);
  return {
    target: `node_modules/${versionIndex === -1 ? pkg : pkg.slice(0, versionIndex)}`,
    targetCheck: 'exists',
    deps: ['npm:init'],
    env,
    run: `${pkgManager} install ${packages.join(' ')}${dev ? ' -D' : ''}`
  };
}), {
  name: 'npm:init',
  target: 'package.json',
  env,
  run: `${pkgManager} init -y`
}] : [{
  name,
  env,
  targets: packages.map(pkg => {
    const versionIndex = pkg.indexOf('@', 1);
    return `node_modules/${versionIndex === -1 ? pkg : pkg.slice(0, versionIndex)}`;
  }),
  run: `echo "\n\\x1b[93mChomp\\x1b[0m: Some packages are missing. Please run \\x1b[1mnpm install ${packages.join(' ')}${dev ? ' -D' : ''}\\x1b[0m\n"`
}];
"""
[[template]]
name = "prettier"
definition = """({ name, targets, deps, env, templateOpts: { files = '.', check = false, write = true, config = null, noErrorOnUnmatchedPattern = false } }) => [{
  name,
  targets,
  deps: [...deps, 'node_modules/prettier'],
  env,
  run: `prettier ${files} ${
      check ? ' --check' : ''
    }${
      write ? ' --write' : ''
    }${
      config ? ` --config ${config}` : ''
    }${
      noErrorOnUnmatchedPattern ? ' --no-error-on-unmatched-pattern' : ''
    }`
}, {
  template: 'npm',
  templateOpts: {
    packages: ['prettier'],
    dev: true
  }
}]
"""
[[template]]
name = "svelte"
definition = """({ name, targets, deps, env, templateOpts: { svelteConfig = null } }) => [{
  name,
  targets,
  deps: [...deps, 'node_modules/svelte', 'node_modules/mkdirp'],
  env,
  engine: 'node',
  run: `
    import { readFile, writeFile } from 'fs/promises';
    import { compile } from 'svelte/compiler';
    import mkdirp from 'mkdirp';
    import { dirname } from 'path';

    let config;
    ${svelteConfig ? `
      config = await import(${svelteConfig === true ? '"./svelte.config.js"' : svelteConfig});
    ` : `
      config = {
        css: false
      };
    `}
    config.filename = process.env.DEP;

    const source = await readFile(process.env.DEP, 'utf-8');
    const result = compile(source, config);

    mkdirp.sync(dirname(process.env.TARGET));
    const cssFile = process.env.TARGET.replace(/\\.js$/, ".css");
    await Promise.all[
      writeFile(process.env.TARGET, result.js.code),
      writeFile(process.env.TARGET + ".map", JSON.stringify(result.js.map)),
      writeFile(cssFile, result.css.code),
      writeFile(cssFile + ".map", JSON.stringify(result.css.map))
    ];
  `
}, {
  template: 'npm',
  templateOpts: {
    packages: ['svelte@3', 'mkdirp'],
    dev: true
  }
}]
"""
[[template]]
name = "swc"
definition = """({ name, targets, deps, env, templateOpts: { configFile = null, swcRc, sourceMaps = true, config = {} } }) => [{
  name,
  targets,
  deps: [...deps, 'node_modules/@swc/core', 'node_modules/@swc/cli'],
  env,
  run: `swc $DEP -o $TARGET${
      !swcRc ? ' --no-swcrc' : ''
    }${
      configFile ? ` --config-file=${configFile}` : ''
    }${
      sourceMaps ? ' --source-maps' : ''
    }${
      Object.keys(config).length ? ' ' + Object.keys(config).map(key => `-C ${key}=${config[key]}`).join(' ') : ''
    }`
}, {
  template: 'npm',
  templateOpts: {
    packages: ['@swc/core@1', '@swc/cli@0.1'],
    dev: true
  }
}]
"""
