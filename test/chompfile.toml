version = 0.1
extensions = ['./assert.js', 'chomp:npm']
default-task = 'test'

[[task]]
name = 'test'
serial = true
deps = ['test:clean', 'test:run']

[[task]]
name = 'test:clean'
display = 'status-only'
stdio = 'none'
run = 'rm output/* ; echo recover'

[[task]]
name = 'test:run'
display = 'none'
deps = [':test[0-9]*']

# -- Test --
[[task]]
name = 'test1'
display = 'none'
target = 'output/test1.txt'
run = 'echo "Chomp Chomp" > $TARGET'
template = 'assert'
[task.template-options]
expect-equals = 'Chomp Chomp'

# -- Test --
[[task]]
name = 'test2'
display = 'none'
target = 'output/test2.txt'
run = '''
  echo "$VAR $ANOTHER" > $TARGET
'''
template = 'assert'
[task.env]
VAR = 'Chomp'
[task.env-default]
ANOTHER = '$VAR MM'
[task.template-options]
expect-equals = 'Chomp Chomp MM'

# -- Test --
[[task]]
name = 'test3'
display = 'none'
target = 'output/test3.js'
deps = ['app.js', 'babel:install']
engine = 'node'
run = '''
  import babel from '@babel/core';
  import { readFileSync, writeFileSync } from 'fs';
  import { basename } from 'path';

  const input = readFileSync(process.env.DEP, 'utf8');
  const { code, map } = babel.transformSync(input, {
    filename: process.env.DEP,
    babelrc: false,
    configFile: false,
    sourceMaps: true,
    presets: [['@babel/preset-env', {
      targets: {
        esmodules: true
      },
      modules: false
    }]],
  });
  writeFileSync(process.env.TARGET, code + '\n//# sourceMappingURL=' + basename(process.env.TARGET) + '.map');
  writeFileSync(process.env.TARGET + '.map', JSON.stringify(map));
'''
template = 'assert'
[task.template-options]
expect-equals = '''export var p = 5;
//# sourceMappingURL=test3.js.map
'''

[[task]]
name = 'babel:install'
display = 'none'
template = 'npm'
[task.template-options]
packages = ['@babel/core', '@babel/preset-env']
auto-install = true

# -- Test --
[[task]]
display = 'status-only'
name = 'test4'
run = 'echo babel'

# -- Test --
[[task]]
name = 'test5'
display = 'none'
target = 'output/unittest.txt'
deps = [':unittest:ok-*']
template = 'assert'
[task.template-options]
expect-equals = '''UNIT OK
'''

[[task]]
name = 'unittest:#'
display = 'none'
stdio = 'stderr-only'
dep = 'unit/#.mjs'
run = 'node $DEP'
[task.template-options]
expect-equals = '''UNIT OK
'''
