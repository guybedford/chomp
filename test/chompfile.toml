version = 0.1

extensions = [
  'chomp:prettier',
  'chomp:jspm',
  'chomp:svelte',
  'chomp:swc',
  'chomp:babel'
]

[template-options.npm]
  auto-install = true

[[task]]
  name = "test"
  serial = true
  deps = ["test:init", "fail", "prettier", "jspm", "svelte", "swc", "babel", "unit", "check"]

[[task]]
  name = "fail"
  run = """
    chomp test:fail
    echo "recover"
  """

[[task]]
  name = "unit"
  dep = "unit/#.js"
  run = "node $DEP >> testlog.txt"

# verify that a serial failure stops the build and logs correctly
[[task]]
  name = "test:fail"
  serial = true
  deps = ["test:init", "prettier", "jspm", "failtask", "test:never"]

# never task -> writes never.txt which is caught by check
[[task]]
  name = "test:never"
  run = "echo \"FAILURE\" > testlog.txt"

[[task]]
  name = "failtask"
  run = "none"

[[task]]
  name = "check"
  deps = ["app-build.html", "test.js"]
  engine = "node"
  run = '''
    import { readFileSync } from 'fs';
    import assert from 'assert';

    const log = readFileSync('testlog.txt', 'utf8').trim().split(/\r?\n/);
    assert.equal(log.length, 2);
    assert(log.indexOf('unit test a') !== -1);
    assert(log.indexOf('unit test b') !== -1);

    console.log('TESTS OK');
  '''

[[task]]
  name = "test:init"
  run = """
    rm testlog.txt
    rm -r node_modules
    rm package.json
    rm package-lock.json
    rm test.js
    rm test.js.map
    rm -r lib
    rm app-build.html
    rm test-babel.js
    rm test-babel.js.map
    echo "export var p:number=5;" > test.ts
  """

[[task]]
  name = "prettier"
  template = "prettier"

[[task]]
  name = "jspm"
  template = "jspm"
  target = "app-build.html"
  deps = ["app.html"]

[[task]]
  name = "svelte"
  template = "svelte"
  target = "lib/test.js"
  deps = ["src/test.svelte"]

[[task]]
  name = "swc"
  template = "swc"
  target = "test.js"
  deps = ["test.ts"]

[[task]]
  name = "babel"
  template = "babel"
  target = "test-babel.js"
  deps = ["test.ts"]
  [task.template-options]
    presets = ['@babel/preset-typescript']
