version = 0.1
default-task = 'test'
extensions = [
    'chomp@0.1:assert',
    'chomp@0.1:npm',
]

[env]
VAL = 'C'

[env-default]
DEFAULT = '${{ VAL }}H'

[[task]]
name = 'test'
deps = [
    'test:clean',
    'test:run',
]
serial = true

[[task]]
name = 'test:clean'
display = 'status-only'
stdio = 'none'
run = 'rm -r output ; echo recover'

[[task]]
name = 'test:run'
deps = [':test[0-9]*']
display = 'none'

[[task]]
name = 'test1'
target = 'output/test1.txt'
display = 'none'
run = 'echo "Chomp Chomp" > $TARGET'
template = 'assert'

[task.template-options]
expect-equals = 'Chomp Chomp'

[[task]]
name = 'test2'
target = 'output/test2.txt'
display = 'none'
run = '''
  ${{ECHO}} "$VAR $ANOTHER" > $TARGET
'''
template = 'assert'

[task.template-options]
expect-equals = 'Chomp CH Chomp CH  Chomp CH  $NOREPLACE CH'

[task.env]
VAR = 'Chomp ${{ DEFAULT }}'
ECHO = 'echo'

[task.env-default]
ANOTHER = '${{VAR}} ${{UNKNOWN}} ${{ VAR }} ${{--INVALID--}} $NOREPLACE ${{ DEFAULT }}'

[[task]]
name = 'test3'
target = 'output/test3.js'
deps = [
    'fixtures/app.js',
    'install:swc',
]
display = 'none'
engine = 'node'
run = '''
  import swc from '@swc/core';
  import { readFileSync, writeFileSync } from 'fs';
  import { basename } from 'path';

  const input = readFileSync(process.env.DEP, 'utf8');

  const { code, map } = await swc.transform(input, {
    filename: process.env.DEP,
    sourceMaps: true,
    jsc: {
      parser: {
        syntax: "typescript",
      },
      transform: {},
    },
  });

  writeFileSync(process.env.TARGET, code + '\n//# sourceMappingURL=' + basename(process.env.TARGET) + '.map');
  writeFileSync(process.env.TARGET + '.map', JSON.stringify(map));
'''
template = 'assert'

[task.template-options]
expect-equals = '''
export var p = 5;

//# sourceMappingURL=test3.js.map
'''

[[task]]
name = 'install:swc'
display = 'none'
template = 'npm'

[task.template-options]
packages = [
    '@swc/core',
    '@swc/cli',
]
auto-install = true

[[task]]
name = 'test4'
target = 'output/unittest.txt'
deps = [':unittest:ok-*']
display = 'none'
template = 'assert'

[task.template-options]
expect-equals = '''
UNIT OK
'''

[[task]]
name = 'unittest:#'
dep = 'unit/#.mjs'
display = 'none'
stdio = 'stderr-only'
run = 'node $DEP'

[task.template-options]
expect-equals = '''
UNIT OK
'''

[[task]]
name = 'test5'
target = 'output/dist/app.js'
deps = [
    'output/lib/**/*.js',
    'install:rollup',
]
display = 'none'
stdio = 'none'
run = 'rollup output/lib/app.js -d output/dist -m'
template = 'assert'

[task.template-options]
expect-equals = '''
var dep = 'dep';

console.log(dep);
var p = 5;

export { p };
//# sourceMappingURL=app.js.map
'''

[[task]]
name = 'install:rollup'
display = 'none'
template = 'npm'

[task.template-options]
packages = ['rollup']
auto-install = true

[[task]]
name = 'build:swc'
target = 'output/lib/#.js'
deps = [
    'fixtures/src/#.ts',
    'install:swc',
]
display = 'none'
stdio = 'stderr-only'
run = 'swc $DEP -o $TARGET --source-maps'

[[task]]
name = 'test6'
target = 'output/deps.txt'
deps = [
    'fixtures/src/**/*.ts',
    'build:swc',
]
run = 'echo "$DEPS" > output/deps.txt'
template = 'assert'

[task.template-options]
expect-match = 'fixtures/src/(app|dep)\.ts:fixtures/src/(app|dep)\.ts:output/lib/app.js:output/lib/dep.js'
