[[template]]
name = "npm"
definition = """({ name, deps, env, templateOptions: { packages, dev, packageManager = 'npm', autoInstall } }, { CHOMP_EJECT }) => CHOMP_EJECT ? [] : autoInstall ? [{
  name,
  deps: [...deps, ...packages.map(pkg => {
    const versionIndex = pkg.indexOf('@', 1);
    return `node_modules/${versionIndex === -1 ? pkg : pkg.slice(0, versionIndex)}`;
  })],
  serial: true
}, ...packages.map(pkg => {
  const versionIndex = pkg.indexOf('@', 1);
  return {
    target: `node_modules/${versionIndex === -1 ? pkg : pkg.slice(0, versionIndex)}`,
    invalidation: 'not-found',
    display: false,
    deps: ['npm:init'],
    env,
    run: `${packageManager} install ${packages.join(' ')}${dev ? ' -D' : ''}`
  };
}), {
  name: 'npm:init',
  target: 'package.json',
  invalidation: 'not-found',
  display: false,
  env,
  run: `${packageManager} init -y`
}] : [{
  name,
  env,
  invalidation: 'not-found',
  display: false,
  targets: packages.map(pkg => {
    const versionIndex = pkg.indexOf('@', 1);
    return `node_modules/${versionIndex === -1 ? pkg : pkg.slice(0, versionIndex)}`;
  }),
  run: `echo "\n\\x1b[93mChomp\\x1b[0m: Some packages are missing. Please run \\x1b[1m${packageManager} install ${packages.join(' ')}${dev ? ' -D' : ''}\\x1b[0m\n"`
}];
"""

[[batcher]]
name = "npm"
batch = """({ run, engine, env }, queue, batch, running) => {
  if (engine !== 'cmd' || !run.startsWith('npm ')) return;
  const args = run.slice(4).split(' ');
  if (args[0] === 'init' && args[1] === '-y' && args.length === 2) {
    const existingNpm = [...queue, ...running].findIndex(({ run }) => run.startsWith('npm ');
    if (existingNpm !== -1) return { queue, batch, completion: existingNpm };
  }
  if (args[0] === 'install') {
    const install = parseInstall(args.slice(1));
    if (!install) return;
    if (running.find({ cmd }) => cmd === 'npm') {
      queue.push({ run, env });
      return { queue, batch, completion: queue.length };
    }
    const batchedInstallIndex = batch.findIndex(({ run, engine }) => {
      if (engine !== 'cmd' || !run.startsWith('npm ')) return false;
      const args = run.slice(4).split(' ');
      if (args[0] !== 'install') return false;
      const batchedInstall = parseInstall(args.slice(1));
      return batchedInstall && batchedInstall.isDev === install.isDev;
    }));
    const batchedInstall = batch[batchedInstallIndex];
    if (batchedInstall) {
      for (const pkg of install.packages) {
        if (!batchedInstall.packages.includes(pkg))
          batchedInstall.packages.push(pkg);
      }
      for (const key of Object.keys(env)) {
        if (!Object.hasOwnProperty(batchedInstall.env, key))
          batchedInstall.env[key] = env[key];
      }
      return { queue, batch, completion: queue.length + batchedInstallIndex };
    }
  }
  function parseInstall (args) {
    const packages = args.filter(arg => !arg.startsWith('-') && arg.indexOf('"') === -1 && arg.indexOf("'") === -1);
    const flags = args.filter(arg => arg.startsWith('-'));
    if (flags.length > 1) return;
    if (flags.length === 1 && flags[0] !== '-D') return;
    if (packages.length + flags.length !== args.length) return;
    const isDev = flags.length === 1;
    return { packages, isDev };
  }
}
"""
